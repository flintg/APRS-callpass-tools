This is a little library I decided to build because I got tired of
people waiting for other people to give them their APRS code.
Sometimes wait times would reach weeks long.
This is a much more elegant solution.

Less hassle for humans, less pissoff-ery for the person needing their code. :)
This does the basic job. It removes the email system, and eliminates wait time.
Provides APRS via browser or JSON over HTTP.
A webserver and command line tool.
You want it? It's yours.

---------------------------------------------------------------
Usage:

        $ python callpass_tools.py [-r] <CALLSIGN>
                <callsign> must be an FCC recognized
                callsign! (no dashes or designators)

        $ python callpass_tools.py [-r] -d [port] [ip]
                This will start the callpass web interface!
                * IP and port are optional.
				  Defaults to 0.0.0.0:8050.

        * An unfortunate inclusion; The -r flag will
          restrict users of the application and deny
          any non-amateurs their APRS-IS code.

--------------------------------------------------------------




REQUIREMENTS:
	Python daemon module. `sudo pip install daemon` or `sudo easy_install daemon`
		Manual install: http://pypi.python.org/pypi/daemon
	The tool for generating the aprs-is callsign passcodes.
		You either know what it is or you don't.

ABILITIES:
[~] As a standalone:
	Generate a code immediately with the built in ability to check against
		licensing authorities and restriction to hams-only.

[~] As a library:
	Simple way to check licenses.
		callpass_tools.get_code() validates the license and returns the code for you.
		Success: { 'status': True, 'callpass': 12345 }
		Failure: { 'status': False, 'reason': 'Could not find callsign in the database' }
	You can start the web daemon from your program.
	The server is accessible from callpass_tools.web_daemon.server

[~] As a web server:
	Offers an HTTP POST interface and an HTTP GET JSON interface at /getcode/AB3DEF
	Binds to any IP/port that's available.
	Prevents you from spawning more than one instance.
	Searches callsigns against the FCC database and sifts through them
	Guaruntees license validity. (Does not check for cancellation yet)
	The callpass is not generated unless the license passes validation.
	A mode to restrict the service to amateurs only, but this is something I
		never wanted to put any effort towards. It seems ridiculous. But it works. :(
		My two cents: You won't be bothered by these people emailing you, what's the harm.

TODO:
	* The default code.html and error.html files need a bit better text styling.
	* Doesn't currently identify cancelled licenses because I don't know if
		that has a consistent entry in the FCC database
	* Switch to using QRZ database API. It's already amamteur's only.
		It's not as current, but it's faster and has more internationals.

LICENSE: GPLv3


Author's note:

	I'm basically a newbie to python, so if you'd like to help, feel free!
Just try to explain changes (in comments) instead of telling me I'm an idiot :)

I've been advised against using HTTPServer for this task, but with the 
ThreadingMixIn it can more than handle the measley amount of requests it will get.


